{
  "Arrow Function Component": {
    "prefix": "sfc",
    "body": [
      "const $1 = ($2) => {",
      "\treturn ( $0 );",
      "}",
      " ",
      "export default $1;"
    ],
    "description": "Arrow Function Component"
  },

  "Polaris Page": {
    "prefix": "createNewPage",
    "body": [
      "import { Page, Layout, LegacyCard } from \"@shopify/polaris\";",
      "",
      "const $1 = ($2) => {",
      "\treturn (",
      "\t\t<>",
      "\t\t\t<Page>",
      "\t\t\t\t<Layout>",
      "\t\t\t\t\t<Layout.Section>",
      "\t\t\t\t\t\t<LegacyCard sectioned title=\"$3\">",
      "\t\t\t\t\t\t\t<p>$4</p>",
      "\t\t\t\t\t\t</LegacyCard>",
      "\t\t\t\t\t</Layout.Section>",
      "\t\t\t\t</Layout>",
      "\t\t\t</Page>",
      "\t\t</>",
      "\t);",
      "};",
      "",
      "export default $1;"
    ],
    "description": "Create a new page with a sectioned LegacyCard component."
  },

  "Polaris Page with Empty State": {
    "prefix": "createNewPageEmpty",
    "body": [
      "import { Page, Layout, LegacyCard, EmptyState } from \"@shopify/polaris\";",
      "",
      "const $1 = ($2) => {",
      "\treturn (",
      "\t\t<>",
      "\t\t\t<Page>",
      "\t\t\t\t<Layout>",
      "\t\t\t\t\t<Layout.Section>",
      "\t\t\t\t\t\t<LegacyCard sectioned>",
      "\t\t\t\t\t\t\t{/* Taken from Shopify Polaris */}",
      "\t\t\t\t\t\t\t<EmptyState",
      "\t\t\t\t\t\t\t\theading=\"Manage your inventory transfers\"",
      "\t\t\t\t\t\t\t\taction={{ content: \"Add transfer\" }}",
      "\t\t\t\t\t\t\t\tsecondaryAction={{",
      "\t\t\t\t\t\t\t\t\tcontent: \"Learn more\",",
      "\t\t\t\t\t\t\t\t\turl: \"https://help.shopify.com\",",
      "\t\t\t\t\t\t\t\t}}",
      "\t\t\t\t\t\t\t\timage=\"https://cdn.shopify.com/s/files/1/0262/4071/2726/files/emptystate-files.png\"",
      "\t\t\t\t\t\t\t>",
      "\t\t\t\t\t\t\t\t<p>Track and receive your incoming inventory from suppliers.</p>",
      "\t\t\t\t\t\t\t</EmptyState>",
      "\t\t\t\t\t\t</LegacyCard>",
      "\t\t\t\t\t</Layout.Section>",
      "\t\t\t\t</Layout>",
      "\t\t\t</Page>",
      "\t\t</>",
      "\t);",
      "};",
      "",
      "export default $1;"
    ],
    "description": "Create a new page with an Empty State and sectioned LegacyCard component."
  },

  "Create new /route || /app_proxy route": {
    "prefix": "createroute",
    "body": [
      "//Import $1 to `./server/routes/index.js` for it to work",
      "//Press `tab` to cycle through and fill up information",
      "",
      "import { Router } from \"express\";",
      "const $1 = Router();",
      "",
      "$1.get(\"/$2\", async (req, res) => { //get / post / put / delete",
      "\ttry {",
      "\t\t$3",
      "\t\treturn res.status(200).send({ message: \"It works!\" });",
      "\t} catch (e) {",
      "\t\tconsole.error(`An error occured at /$2`); ",
      "\t\treturn res.status(400).send({ error: true });",
      "\t}",
      "});",
      "",
      "export default $1;"
    ],
    "description": "Create new /route || /app_proxy route"
  },

  "Webhook function": {
    "prefix": "createwebhook",
    "body": [
      "//Press `tab` to cycle through and fill up information",
      "",
      "/**",
      "* Replace TOPIC_NAME with a Webhook Topic to enable autocomplete",
      "* @typedef { import(\"../../_developer/types/2023-07/webhooks.js\").${2:TOPIC_NAME} } webhookTopic",
      "*/",
      "",
      "const $1 = async (topic, shop, webhookRequestBody, webhookId, apiVersion) => {",
      "\ttry {",
      "\t\t/** @type {webhookTopic} */",
      "\t\tconst webhookBody = JSON.parse(webhookRequestBody);",
      "\t\t$3",
      "\t} catch (e) {",
      "\t\tconsole.error(e);",
      "\t}",
      "};",
      "",
      "export default $1;"
    ],
    "description": "Webhook function"
  },

  "GraphQL Client Provider": {
    "prefix": "createClientGql",
    "body": [
      "//Press `tab` to cycle through and fill up information",
      "//Import `clientProvider`",
      "",
      "const $1 = async (req, res) => {",
      "\ttry {",
      "\t\tconst { client } = await clientProvider.graphqlClient({",
      "\t\t\treq,",
      "\t\t\tres,",
      "\t\t\tisOnline: true, //false for offline session, true for online session",
      "\t\t});",
      "",
      "\t\tconst response = await client.query({",
      "\t\t\tdata: `{$2}`, //Paste your GraphQL query/mutation here",
      "\t\t});",
      "",
      "\t\tres.status(200).send(response);",
      "\t} catch (e) {",
      "\t\tconsole.error(e);",
      "\t\treturn res.status(400).send({ error: true });",
      "\t}",
      "};",
      "",
      "export default $1;"
    ],
    "description": "GraphQL Client Provider"
  },
  "Offline GraphQL Client Provider": {
    "prefix": "createOfflineClientGql",
    "body": [
      "//Press `tab` to cycle through and fill up information",
      "//Import `clientProvider`",
      "",
      "const $1 = async (req, res) => {",
      "\ttry {",
      "\t\tconst { client } = await clientProvider.offline.graphqlClient({shop: res.locals.user_shop}); //Only available in app proxy routes",
      "",
      "\t\tconst response = await client.query({",
      "\t\t\tdata: `{$2}`, //Paste your GraphQL query/mutation here",
      "\t\t});",
      "",
      "\t\treturn res.status(200).send(response);",
      "\t} catch (e) {",
      "\t\tconsole.error(e);",
      "\t\treturn res.status(400).send({ error: true });",
      "\t}",
      "};",
      "",
      "export default $1;"
    ],
    "description": "Offline GraphQL Client Provider"
  }
}
